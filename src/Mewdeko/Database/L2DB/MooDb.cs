// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using LinqToDB.Async;
using Mewdeko.Database.L2DB;

#pragma warning disable 1573, 1591
#nullable enable

namespace DataModel
{
	public partial class MooDb : DataConnection
	{
		public MooDb()
		{
			InitDataContext();
		}

		public MooDb(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public MooDb(DataOptions<MooDb> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<Afk>                       Afks                       => this.GetTable<Afk>();
		public ITable<AiConversation>            AiConversations            => this.GetTable<AiConversation>();
		public ITable<AiMessage>                 AiMessages                 => this.GetTable<AiMessage>();
		public ITable<AntiAltSetting>            AntiAltSettings            => this.GetTable<AntiAltSetting>();
		public ITable<AntiMassMentionSetting>    AntiMassMentionSettings    => this.GetTable<AntiMassMentionSetting>();
		public ITable<AntiRaidSetting>           AntiRaidSettings           => this.GetTable<AntiRaidSetting>();
		public ITable<AntiSpamIgnore>            AntiSpamIgnores            => this.GetTable<AntiSpamIgnore>();
		public ITable<AntiSpamSetting>           AntiSpamSettings           => this.GetTable<AntiSpamSetting>();
		public ITable<AuthCode>                  AuthCodes                  => this.GetTable<AuthCode>();
		public ITable<AutoBanRole>               AutoBanRoles               => this.GetTable<AutoBanRole>();
		public ITable<AutoBanWord>               AutoBanWords               => this.GetTable<AutoBanWord>();
		public ITable<AutoCommand>               AutoCommands               => this.GetTable<AutoCommand>();
		public ITable<AutoPublish>               AutoPublishes              => this.GetTable<AutoPublish>();
		public ITable<BanTemplate>               BanTemplates               => this.GetTable<BanTemplate>();
		public ITable<BirthdayConfig>            BirthdayConfigs            => this.GetTable<BirthdayConfig>();
		public ITable<Blacklist>                 Blacklists                 => this.GetTable<Blacklist>();
		public ITable<BlacklistedPermission>     BlacklistedPermissions     => this.GetTable<BlacklistedPermission>();
		public ITable<BlacklistedRole>           BlacklistedRoles           => this.GetTable<BlacklistedRole>();
		public ITable<BotInstance>               BotInstances               => this.GetTable<BotInstance>();
		public ITable<BotReview>                 BotReviews                 => this.GetTable<BotReview>();
		public ITable<CaseNote>                  CaseNotes                  => this.GetTable<CaseNote>();
		public ITable<ChatLog>                   ChatLogs                   => this.GetTable<ChatLog>();
		public ITable<ChatTrigger>               ChatTriggers               => this.GetTable<ChatTrigger>();
		public ITable<CommandAlias>              CommandAliases             => this.GetTable<CommandAlias>();
		public ITable<CommandCooldown>           CommandCooldowns           => this.GetTable<CommandCooldown>();
		public ITable<CommandStat>               CommandStats               => this.GetTable<CommandStat>();
		public ITable<Confession>                Confessions                => this.GetTable<Confession>();
		public ITable<CustomVoiceChannel>        CustomVoiceChannels        => this.GetTable<CustomVoiceChannel>();
		public ITable<CustomVoiceConfig>         CustomVoiceConfigs         => this.GetTable<CustomVoiceConfig>();
		public ITable<DelMsgOnCmdChannel>        DelMsgOnCmdChannels        => this.GetTable<DelMsgOnCmdChannel>();
		public ITable<DiscordPermOverride>       DiscordPermOverrides       => this.GetTable<DiscordPermOverride>();
		public ITable<DiscordUser>               DiscordUsers               => this.GetTable<DiscordUser>();
		public ITable<Embed>                     Embeds                     => this.GetTable<Embed>();
		public ITable<FeedSub>                   FeedSubs                   => this.GetTable<FeedSub>();
		public ITable<FilterInvitesChannelId>    FilterInvitesChannelIds    => this.GetTable<FilterInvitesChannelId>();
		public ITable<FilterLinksChannelId>      FilterLinksChannelIds      => this.GetTable<FilterLinksChannelId>();
		public ITable<FilterWordsChannelId>      FilterWordsChannelIds      => this.GetTable<FilterWordsChannelId>();
		public ITable<FilteredWord>              FilteredWords              => this.GetTable<FilteredWord>();
		public ITable<FollowedStream>            FollowedStreams            => this.GetTable<FollowedStream>();
		public ITable<GiveawayUser>              GiveawayUsers              => this.GetTable<GiveawayUser>();
		public ITable<Giveaway>                  Giveaways                  => this.GetTable<Giveaway>();
		public ITable<GlobalUserBalance>         GlobalUserBalances         => this.GetTable<GlobalUserBalance>();
		public ITable<GroupName>                 GroupNames                 => this.GetTable<GroupName>();
		public ITable<GuildAiConfig>             GuildAiConfigs             => this.GetTable<GuildAiConfig>();
		public ITable<GuildConfig>               GuildConfigs               => this.GetTable<GuildConfig>();
		public ITable<GuildRepeater>             GuildRepeaters             => this.GetTable<GuildRepeater>();
		public ITable<GuildTicketSetting>        GuildTicketSettings        => this.GetTable<GuildTicketSetting>();
		public ITable<GuildUserBalance>          GuildUserBalances          => this.GetTable<GuildUserBalance>();
		public ITable<GuildUserXp>               GuildUserXps               => this.GetTable<GuildUserXp>();
		public ITable<GuildXpSetting>            GuildXpSettings            => this.GetTable<GuildXpSetting>();
		public ITable<HighlightSetting>          HighlightSettings          => this.GetTable<HighlightSetting>();
		public ITable<Highlight>                 Highlights                 => this.GetTable<Highlight>();
		public ITable<IgnoredLogChannel>         IgnoredLogChannels         => this.GetTable<IgnoredLogChannel>();
		public ITable<InviteCountSetting>        InviteCountSettings        => this.GetTable<InviteCountSetting>();
		public ITable<InviteCount>               InviteCounts               => this.GetTable<InviteCount>();
		public ITable<InvitedBy>                 InvitedBies                => this.GetTable<InvitedBy>();
		public ITable<JoinLeaveLog>              JoinLeaveLogs              => this.GetTable<JoinLeaveLog>();
		public ITable<LockdownChannelPermission> LockdownChannelPermissions => this.GetTable<LockdownChannelPermission>();
		public ITable<LoggingV2>                 LoggingV2                  => this.GetTable<LoggingV2>();
		public ITable<MessageCount>              MessageCounts              => this.GetTable<MessageCount>();
		public ITable<MessageTimestamp>          MessageTimestamps          => this.GetTable<MessageTimestamp>();
		public ITable<MultiGreet>                MultiGreets                => this.GetTable<MultiGreet>();
		public ITable<MusicPlayerSetting>        MusicPlayerSettings        => this.GetTable<MusicPlayerSetting>();
		public ITable<MusicPlaylistTrack>        MusicPlaylistTracks        => this.GetTable<MusicPlaylistTrack>();
		public ITable<MusicPlaylist>             MusicPlaylists             => this.GetTable<MusicPlaylist>();
		public ITable<MutedUserId>               MutedUserIds               => this.GetTable<MutedUserId>();
		public ITable<NoteEdit>                  NoteEdits                  => this.GetTable<NoteEdit>();
		public ITable<NsfwBlacklistedTag>        NsfwBlacklistedTags        => this.GetTable<NsfwBlacklistedTag>();
		public ITable<OwnerOnly>                 OwnerOnlies                => this.GetTable<OwnerOnly>();
		public ITable<PanelButton>               PanelButtons               => this.GetTable<PanelButton>();
		public ITable<PanelSelectMenu>           PanelSelectMenus           => this.GetTable<PanelSelectMenu>();
		public ITable<Permission>                Permissions                => this.GetTable<Permission>();
		public ITable<Permission1>               Permissions1               => this.GetTable<Permission1>();
		public ITable<PlaylistSong>              PlaylistSongs              => this.GetTable<PlaylistSong>();
		public ITable<Poll>                      Polls                      => this.GetTable<Poll>();
		public ITable<PollVote>                  PollVotes                  => this.GetTable<PollVote>();
		public ITable<PublishUserBlacklist>      PublishUserBlacklists      => this.GetTable<PublishUserBlacklist>();
		public ITable<PublishWordBlacklist>      PublishWordBlacklists      => this.GetTable<PublishWordBlacklist>();
		public ITable<Quote>                     Quotes                     => this.GetTable<Quote>();
		public ITable<ReactionRole>              ReactionRoles              => this.GetTable<ReactionRole>();
		public ITable<ReactionRoleMessage>       ReactionRoleMessages       => this.GetTable<ReactionRoleMessage>();
		public ITable<Reminder>                  Reminders                  => this.GetTable<Reminder>();
		public ITable<RoleGreet>                 RoleGreets                 => this.GetTable<RoleGreet>();
		public ITable<RoleMonitoringSetting>     RoleMonitoringSettings     => this.GetTable<RoleMonitoringSetting>();
		public ITable<RoleStateSetting>          RoleStateSettings          => this.GetTable<RoleStateSetting>();
		public ITable<RotatingStatus>            RotatingStatuses           => this.GetTable<RotatingStatus>();
		public ITable<SelectMenuOption>          SelectMenuOptions          => this.GetTable<SelectMenuOption>();
		public ITable<SelfAssignableRole>        SelfAssignableRoles        => this.GetTable<SelfAssignableRole>();
		public ITable<ServerRecoveryStore>       ServerRecoveryStores       => this.GetTable<ServerRecoveryStore>();
		public ITable<StarboardPost>             StarboardPosts             => this.GetTable<StarboardPost>();
		public ITable<Starboard>                 Starboards                 => this.GetTable<Starboard>();
		public ITable<StarboardStats>            StarboardStats             => this.GetTable<StarboardStats>();
		public ITable<StarboardReaction>         StarboardReactions         => this.GetTable<StarboardReaction>();
		public ITable<StatusRole>                StatusRoles                => this.GetTable<StatusRole>();
		public ITable<StreamRoleBlacklistedUser> StreamRoleBlacklistedUsers => this.GetTable<StreamRoleBlacklistedUser>();
		public ITable<StreamRoleSetting>         StreamRoleSettings         => this.GetTable<StreamRoleSetting>();
		public ITable<StreamRoleWhitelistedUser> StreamRoleWhitelistedUsers => this.GetTable<StreamRoleWhitelistedUser>();
		public ITable<SuggestThread>             SuggestThreads             => this.GetTable<SuggestThread>();
		public ITable<SuggestVote>               SuggestVotes               => this.GetTable<SuggestVote>();
		public ITable<Suggestion>                Suggestions                => this.GetTable<Suggestion>();
		public ITable<Template>                  Templates                  => this.GetTable<Template>();
		public ITable<TemplateBar>               TemplateBars               => this.GetTable<TemplateBar>();
		public ITable<TemplateClub>              TemplateClubs              => this.GetTable<TemplateClub>();
		public ITable<TemplateGuild>             TemplateGuilds             => this.GetTable<TemplateGuild>();
		public ITable<TemplateUser>              TemplateUsers              => this.GetTable<TemplateUser>();
		public ITable<TicketCase>                TicketCases                => this.GetTable<TicketCase>();
		public ITable<TicketNote>                TicketNotes                => this.GetTable<TicketNote>();
		public ITable<TicketPanel>               TicketPanels               => this.GetTable<TicketPanel>();
		public ITable<TicketPriority>            TicketPriorities           => this.GetTable<TicketPriority>();
		public ITable<TicketTag>                 TicketTags                 => this.GetTable<TicketTag>();
		public ITable<Ticket>                    Tickets                    => this.GetTable<Ticket>();
		public ITable<TransactionHistory>        TransactionHistories       => this.GetTable<TransactionHistory>();
		public ITable<UnbanTimer>                UnbanTimers                => this.GetTable<UnbanTimer>();
		public ITable<UnmuteTimer>               UnmuteTimers               => this.GetTable<UnmuteTimer>();
		public ITable<UnroleTimer>               UnroleTimers               => this.GetTable<UnroleTimer>();
		public ITable<UserRoleState>             UserRoleStates             => this.GetTable<UserRoleState>();
		public ITable<UserVoicePreference>       UserVoicePreferences       => this.GetTable<UserVoicePreference>();
		public ITable<VcRole>                    VcRoles                    => this.GetTable<VcRole>();
		public ITable<VoteRole>                  VoteRoles                  => this.GetTable<VoteRole>();
		public ITable<Vote>                      Votes                      => this.GetTable<Vote>();
		public ITable<WarningPunishment>         WarningPunishments         => this.GetTable<WarningPunishment>();
		public ITable<WarningPunishment2>        WarningPunishment2         => this.GetTable<WarningPunishment2>();
		public ITable<Warning>                   Warnings                   => this.GetTable<Warning>();
		public ITable<Warnings2>                 Warnings2                  => this.GetTable<Warnings2>();
		public ITable<WhitelistedRole>           WhitelistedRoles           => this.GetTable<WhitelistedRole>();
		public ITable<WhitelistedUser>           WhitelistedUsers           => this.GetTable<WhitelistedUser>();
		public ITable<XpBoostEvent>              XpBoostEvents              => this.GetTable<XpBoostEvent>();
		public ITable<XpChannelMultiplier>       XpChannelMultipliers       => this.GetTable<XpChannelMultiplier>();
		public ITable<XpCompetitionEntry>        XpCompetitionEntries       => this.GetTable<XpCompetitionEntry>();
		public ITable<XpCompetitionReward>       XpCompetitionRewards       => this.GetTable<XpCompetitionReward>();
		public ITable<XpCompetition>             XpCompetitions             => this.GetTable<XpCompetition>();
		public ITable<XpCurrencyReward>          XpCurrencyRewards          => this.GetTable<XpCurrencyReward>();
		public ITable<XpExcludedItem>            XpExcludedItems            => this.GetTable<XpExcludedItem>();
		public ITable<XpRoleMultiplier>          XpRoleMultipliers          => this.GetTable<XpRoleMultiplier>();
		public ITable<XpRoleReward>              XpRoleRewards              => this.GetTable<XpRoleReward>();
		public ITable<XpRoleTracking>            XpRoleTrackings            => this.GetTable<XpRoleTracking>();
		public ITable<XpUserSnapshot>            XpUserSnapshots            => this.GetTable<XpUserSnapshot>();
		public ITable<EfMigrationsHistory>       EfMigrationsHistories      => this.GetTable<EfMigrationsHistory>();
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static Afk? Find(this ITable<Afk> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Afk?> FindAsync(this ITable<Afk> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static AiConversation? Find(this ITable<AiConversation> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AiConversation?> FindAsync(this ITable<AiConversation> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static AiMessage? Find(this ITable<AiMessage> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AiMessage?> FindAsync(this ITable<AiMessage> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static AntiAltSetting? Find(this ITable<AntiAltSetting> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AntiAltSetting?> FindAsync(this ITable<AntiAltSetting> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static AntiMassMentionSetting? Find(this ITable<AntiMassMentionSetting> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AntiMassMentionSetting?> FindAsync(this ITable<AntiMassMentionSetting> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static AntiRaidSetting? Find(this ITable<AntiRaidSetting> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AntiRaidSetting?> FindAsync(this ITable<AntiRaidSetting> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static AntiSpamIgnore? Find(this ITable<AntiSpamIgnore> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AntiSpamIgnore?> FindAsync(this ITable<AntiSpamIgnore> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static AntiSpamSetting? Find(this ITable<AntiSpamSetting> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AntiSpamSetting?> FindAsync(this ITable<AntiSpamSetting> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static AuthCode? Find(this ITable<AuthCode> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AuthCode?> FindAsync(this ITable<AuthCode> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static AutoBanRole? Find(this ITable<AutoBanRole> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AutoBanRole?> FindAsync(this ITable<AutoBanRole> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static AutoBanWord? Find(this ITable<AutoBanWord> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AutoBanWord?> FindAsync(this ITable<AutoBanWord> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static AutoCommand? Find(this ITable<AutoCommand> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AutoCommand?> FindAsync(this ITable<AutoCommand> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static AutoPublish? Find(this ITable<AutoPublish> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AutoPublish?> FindAsync(this ITable<AutoPublish> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static BanTemplate? Find(this ITable<BanTemplate> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<BanTemplate?> FindAsync(this ITable<BanTemplate> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Blacklist? Find(this ITable<Blacklist> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Blacklist?> FindAsync(this ITable<Blacklist> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static BlacklistedPermission? Find(this ITable<BlacklistedPermission> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<BlacklistedPermission?> FindAsync(this ITable<BlacklistedPermission> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static BlacklistedRole? Find(this ITable<BlacklistedRole> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<BlacklistedRole?> FindAsync(this ITable<BlacklistedRole> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static BotInstance? Find(this ITable<BotInstance> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<BotInstance?> FindAsync(this ITable<BotInstance> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static BotReview? Find(this ITable<BotReview> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<BotReview?> FindAsync(this ITable<BotReview> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static CaseNote? Find(this ITable<CaseNote> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<CaseNote?> FindAsync(this ITable<CaseNote> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static ChatLog? Find(this ITable<ChatLog> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<ChatLog?> FindAsync(this ITable<ChatLog> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static ChatTrigger? Find(this ITable<ChatTrigger> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<ChatTrigger?> FindAsync(this ITable<ChatTrigger> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static CommandAlias? Find(this ITable<CommandAlias> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<CommandAlias?> FindAsync(this ITable<CommandAlias> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static CommandCooldown? Find(this ITable<CommandCooldown> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<CommandCooldown?> FindAsync(this ITable<CommandCooldown> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static CommandStat? Find(this ITable<CommandStat> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<CommandStat?> FindAsync(this ITable<CommandStat> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Confession? Find(this ITable<Confession> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Confession?> FindAsync(this ITable<Confession> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static CustomVoiceChannel? Find(this ITable<CustomVoiceChannel> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<CustomVoiceChannel?> FindAsync(this ITable<CustomVoiceChannel> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static CustomVoiceConfig? Find(this ITable<CustomVoiceConfig> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<CustomVoiceConfig?> FindAsync(this ITable<CustomVoiceConfig> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static DelMsgOnCmdChannel? Find(this ITable<DelMsgOnCmdChannel> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<DelMsgOnCmdChannel?> FindAsync(this ITable<DelMsgOnCmdChannel> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static DiscordPermOverride? Find(this ITable<DiscordPermOverride> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<DiscordPermOverride?> FindAsync(this ITable<DiscordPermOverride> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static DiscordUser? Find(this ITable<DiscordUser> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<DiscordUser?> FindAsync(this ITable<DiscordUser> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Embed? Find(this ITable<Embed> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Embed?> FindAsync(this ITable<Embed> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static FeedSub? Find(this ITable<FeedSub> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<FeedSub?> FindAsync(this ITable<FeedSub> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static FilterInvitesChannelId? Find(this ITable<FilterInvitesChannelId> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<FilterInvitesChannelId?> FindAsync(this ITable<FilterInvitesChannelId> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static FilterLinksChannelId? Find(this ITable<FilterLinksChannelId> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<FilterLinksChannelId?> FindAsync(this ITable<FilterLinksChannelId> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static FilterWordsChannelId? Find(this ITable<FilterWordsChannelId> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<FilterWordsChannelId?> FindAsync(this ITable<FilterWordsChannelId> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static FilteredWord? Find(this ITable<FilteredWord> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<FilteredWord?> FindAsync(this ITable<FilteredWord> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static FollowedStream? Find(this ITable<FollowedStream> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<FollowedStream?> FindAsync(this ITable<FollowedStream> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static GiveawayUser? Find(this ITable<GiveawayUser> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<GiveawayUser?> FindAsync(this ITable<GiveawayUser> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Giveaway? Find(this ITable<Giveaway> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Giveaway?> FindAsync(this ITable<Giveaway> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static GlobalUserBalance? Find(this ITable<GlobalUserBalance> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<GlobalUserBalance?> FindAsync(this ITable<GlobalUserBalance> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static GroupName? Find(this ITable<GroupName> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<GroupName?> FindAsync(this ITable<GroupName> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static GuildAiConfig? Find(this ITable<GuildAiConfig> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<GuildAiConfig?> FindAsync(this ITable<GuildAiConfig> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static GuildConfig? Find(this ITable<GuildConfig> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<GuildConfig?> FindAsync(this ITable<GuildConfig> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static GuildRepeater? Find(this ITable<GuildRepeater> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<GuildRepeater?> FindAsync(this ITable<GuildRepeater> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static GuildTicketSetting? Find(this ITable<GuildTicketSetting> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<GuildTicketSetting?> FindAsync(this ITable<GuildTicketSetting> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static GuildUserBalance? Find(this ITable<GuildUserBalance> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<GuildUserBalance?> FindAsync(this ITable<GuildUserBalance> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static GuildUserXp? Find(this ITable<GuildUserXp> table, ulong guildId, ulong userId)
		{
			return table.FirstOrDefault(e => e.GuildId == guildId && e.UserId == userId);
		}

		public static Task<GuildUserXp?> FindAsync(this ITable<GuildUserXp> table, ulong guildId, ulong userId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.GuildId == guildId && e.UserId == userId, cancellationToken);
		}

		public static GuildXpSetting? Find(this ITable<GuildXpSetting> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<GuildXpSetting?> FindAsync(this ITable<GuildXpSetting> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static HighlightSetting? Find(this ITable<HighlightSetting> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<HighlightSetting?> FindAsync(this ITable<HighlightSetting> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Highlight? Find(this ITable<Highlight> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Highlight?> FindAsync(this ITable<Highlight> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IgnoredLogChannel? Find(this ITable<IgnoredLogChannel> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<IgnoredLogChannel?> FindAsync(this ITable<IgnoredLogChannel> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static InviteCountSetting? Find(this ITable<InviteCountSetting> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<InviteCountSetting?> FindAsync(this ITable<InviteCountSetting> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static InviteCount? Find(this ITable<InviteCount> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<InviteCount?> FindAsync(this ITable<InviteCount> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static InvitedBy? Find(this ITable<InvitedBy> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<InvitedBy?> FindAsync(this ITable<InvitedBy> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static JoinLeaveLog? Find(this ITable<JoinLeaveLog> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<JoinLeaveLog?> FindAsync(this ITable<JoinLeaveLog> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static LockdownChannelPermission? Find(this ITable<LockdownChannelPermission> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<LockdownChannelPermission?> FindAsync(this ITable<LockdownChannelPermission> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static LoggingV2? Find(this ITable<LoggingV2> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<LoggingV2?> FindAsync(this ITable<LoggingV2> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static MessageCount? Find(this ITable<MessageCount> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<MessageCount?> FindAsync(this ITable<MessageCount> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static MessageTimestamp? Find(this ITable<MessageTimestamp> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<MessageTimestamp?> FindAsync(this ITable<MessageTimestamp> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static MultiGreet? Find(this ITable<MultiGreet> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<MultiGreet?> FindAsync(this ITable<MultiGreet> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static MusicPlayerSetting? Find(this ITable<MusicPlayerSetting> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<MusicPlayerSetting?> FindAsync(this ITable<MusicPlayerSetting> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static MusicPlaylistTrack? Find(this ITable<MusicPlaylistTrack> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<MusicPlaylistTrack?> FindAsync(this ITable<MusicPlaylistTrack> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static MusicPlaylist? Find(this ITable<MusicPlaylist> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<MusicPlaylist?> FindAsync(this ITable<MusicPlaylist> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static MutedUserId? Find(this ITable<MutedUserId> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<MutedUserId?> FindAsync(this ITable<MutedUserId> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static NoteEdit? Find(this ITable<NoteEdit> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<NoteEdit?> FindAsync(this ITable<NoteEdit> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static NsfwBlacklistedTag? Find(this ITable<NsfwBlacklistedTag> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<NsfwBlacklistedTag?> FindAsync(this ITable<NsfwBlacklistedTag> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static OwnerOnly? Find(this ITable<OwnerOnly> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<OwnerOnly?> FindAsync(this ITable<OwnerOnly> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static PanelButton? Find(this ITable<PanelButton> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<PanelButton?> FindAsync(this ITable<PanelButton> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static PanelSelectMenu? Find(this ITable<PanelSelectMenu> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<PanelSelectMenu?> FindAsync(this ITable<PanelSelectMenu> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Permission? Find(this ITable<Permission> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Permission?> FindAsync(this ITable<Permission> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Permission1? Find1(this ITable<Permission1> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Permission1?> FindAsync1(this ITable<Permission1> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static PlaylistSong? Find(this ITable<PlaylistSong> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<PlaylistSong?> FindAsync(this ITable<PlaylistSong> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Poll? Find(this ITable<Poll> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Poll?> FindAsync(this ITable<Poll> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static PollVote? Find(this ITable<PollVote> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<PollVote?> FindAsync(this ITable<PollVote> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static PublishUserBlacklist? Find(this ITable<PublishUserBlacklist> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<PublishUserBlacklist?> FindAsync(this ITable<PublishUserBlacklist> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static PublishWordBlacklist? Find(this ITable<PublishWordBlacklist> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<PublishWordBlacklist?> FindAsync(this ITable<PublishWordBlacklist> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Quote? Find(this ITable<Quote> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Quote?> FindAsync(this ITable<Quote> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static ReactionRole? Find(this ITable<ReactionRole> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<ReactionRole?> FindAsync(this ITable<ReactionRole> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static ReactionRoleMessage? Find(this ITable<ReactionRoleMessage> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<ReactionRoleMessage?> FindAsync(this ITable<ReactionRoleMessage> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Reminder? Find(this ITable<Reminder> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Reminder?> FindAsync(this ITable<Reminder> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static RoleGreet? Find(this ITable<RoleGreet> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<RoleGreet?> FindAsync(this ITable<RoleGreet> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static RoleMonitoringSetting? Find(this ITable<RoleMonitoringSetting> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<RoleMonitoringSetting?> FindAsync(this ITable<RoleMonitoringSetting> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static RoleStateSetting? Find(this ITable<RoleStateSetting> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<RoleStateSetting?> FindAsync(this ITable<RoleStateSetting> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static RotatingStatus? Find(this ITable<RotatingStatus> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<RotatingStatus?> FindAsync(this ITable<RotatingStatus> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static SelectMenuOption? Find(this ITable<SelectMenuOption> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<SelectMenuOption?> FindAsync(this ITable<SelectMenuOption> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static SelfAssignableRole? Find(this ITable<SelfAssignableRole> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<SelfAssignableRole?> FindAsync(this ITable<SelfAssignableRole> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static ServerRecoveryStore? Find(this ITable<ServerRecoveryStore> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<ServerRecoveryStore?> FindAsync(this ITable<ServerRecoveryStore> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static StarboardPost? Find(this ITable<StarboardPost> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<StarboardPost?> FindAsync(this ITable<StarboardPost> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Starboard? Find(this ITable<Starboard> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Starboard?> FindAsync(this ITable<Starboard> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static StatusRole? Find(this ITable<StatusRole> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<StatusRole?> FindAsync(this ITable<StatusRole> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static StreamRoleBlacklistedUser? Find(this ITable<StreamRoleBlacklistedUser> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<StreamRoleBlacklistedUser?> FindAsync(this ITable<StreamRoleBlacklistedUser> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static StreamRoleSetting? Find(this ITable<StreamRoleSetting> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<StreamRoleSetting?> FindAsync(this ITable<StreamRoleSetting> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static StreamRoleWhitelistedUser? Find(this ITable<StreamRoleWhitelistedUser> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<StreamRoleWhitelistedUser?> FindAsync(this ITable<StreamRoleWhitelistedUser> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static SuggestThread? Find(this ITable<SuggestThread> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<SuggestThread?> FindAsync(this ITable<SuggestThread> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static SuggestVote? Find(this ITable<SuggestVote> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<SuggestVote?> FindAsync(this ITable<SuggestVote> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Suggestion? Find(this ITable<Suggestion> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Suggestion?> FindAsync(this ITable<Suggestion> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Template? Find(this ITable<Template> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Template?> FindAsync(this ITable<Template> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static TemplateBar? Find(this ITable<TemplateBar> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TemplateBar?> FindAsync(this ITable<TemplateBar> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static TemplateClub? Find(this ITable<TemplateClub> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TemplateClub?> FindAsync(this ITable<TemplateClub> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static TemplateGuild? Find(this ITable<TemplateGuild> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TemplateGuild?> FindAsync(this ITable<TemplateGuild> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static TemplateUser? Find(this ITable<TemplateUser> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TemplateUser?> FindAsync(this ITable<TemplateUser> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static TicketCase? Find(this ITable<TicketCase> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TicketCase?> FindAsync(this ITable<TicketCase> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static TicketNote? Find(this ITable<TicketNote> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TicketNote?> FindAsync(this ITable<TicketNote> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static TicketPanel? Find(this ITable<TicketPanel> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TicketPanel?> FindAsync(this ITable<TicketPanel> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static TicketPriority? Find(this ITable<TicketPriority> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TicketPriority?> FindAsync(this ITable<TicketPriority> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static TicketTag? Find(this ITable<TicketTag> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TicketTag?> FindAsync(this ITable<TicketTag> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Ticket? Find(this ITable<Ticket> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Ticket?> FindAsync(this ITable<Ticket> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static TransactionHistory? Find(this ITable<TransactionHistory> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TransactionHistory?> FindAsync(this ITable<TransactionHistory> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static UnbanTimer? Find(this ITable<UnbanTimer> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<UnbanTimer?> FindAsync(this ITable<UnbanTimer> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static UnmuteTimer? Find(this ITable<UnmuteTimer> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<UnmuteTimer?> FindAsync(this ITable<UnmuteTimer> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static UnroleTimer? Find(this ITable<UnroleTimer> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<UnroleTimer?> FindAsync(this ITable<UnroleTimer> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static UserRoleState? Find(this ITable<UserRoleState> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<UserRoleState?> FindAsync(this ITable<UserRoleState> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static UserVoicePreference? Find(this ITable<UserVoicePreference> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<UserVoicePreference?> FindAsync(this ITable<UserVoicePreference> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static VcRole? Find(this ITable<VcRole> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<VcRole?> FindAsync(this ITable<VcRole> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static VoteRole? Find(this ITable<VoteRole> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<VoteRole?> FindAsync(this ITable<VoteRole> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Vote? Find(this ITable<Vote> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Vote?> FindAsync(this ITable<Vote> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static WarningPunishment? Find(this ITable<WarningPunishment> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<WarningPunishment?> FindAsync(this ITable<WarningPunishment> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static WarningPunishment2? Find(this ITable<WarningPunishment2> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<WarningPunishment2?> FindAsync(this ITable<WarningPunishment2> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Warning? Find(this ITable<Warning> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Warning?> FindAsync(this ITable<Warning> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Warnings2? Find(this ITable<Warnings2> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Warnings2?> FindAsync(this ITable<Warnings2> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static WhitelistedRole? Find(this ITable<WhitelistedRole> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<WhitelistedRole?> FindAsync(this ITable<WhitelistedRole> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static WhitelistedUser? Find(this ITable<WhitelistedUser> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<WhitelistedUser?> FindAsync(this ITable<WhitelistedUser> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static XpBoostEvent? Find(this ITable<XpBoostEvent> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<XpBoostEvent?> FindAsync(this ITable<XpBoostEvent> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static XpChannelMultiplier? Find(this ITable<XpChannelMultiplier> table, ulong guildId, ulong channelId)
		{
			return table.FirstOrDefault(e => e.GuildId == guildId && e.ChannelId == channelId);
		}

		public static Task<XpChannelMultiplier?> FindAsync(this ITable<XpChannelMultiplier> table, ulong guildId, ulong channelId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.GuildId == guildId && e.ChannelId == channelId, cancellationToken);
		}

		public static XpCompetitionEntry? Find(this ITable<XpCompetitionEntry> table, int competitionId, ulong userId)
		{
			return table.FirstOrDefault(e => e.CompetitionId == competitionId && e.UserId == userId);
		}

		public static Task<XpCompetitionEntry?> FindAsync(this ITable<XpCompetitionEntry> table, int competitionId, ulong userId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.CompetitionId == competitionId && e.UserId == userId, cancellationToken);
		}

		public static XpCompetitionReward? Find(this ITable<XpCompetitionReward> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<XpCompetitionReward?> FindAsync(this ITable<XpCompetitionReward> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static XpCompetition? Find(this ITable<XpCompetition> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<XpCompetition?> FindAsync(this ITable<XpCompetition> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static XpCurrencyReward? Find(this ITable<XpCurrencyReward> table, ulong guildId, int level)
		{
			return table.FirstOrDefault(e => e.GuildId == guildId && e.Level == level);
		}

		public static Task<XpCurrencyReward?> FindAsync(this ITable<XpCurrencyReward> table, ulong guildId, int level, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.GuildId == guildId && e.Level == level, cancellationToken);
		}

		public static XpExcludedItem? Find(this ITable<XpExcludedItem> table, ulong guildId, ulong itemId, int itemType)
		{
			return table.FirstOrDefault(e => e.GuildId == guildId && e.ItemId == itemId && e.ItemType == itemType);
		}

		public static Task<XpExcludedItem?> FindAsync(this ITable<XpExcludedItem> table, ulong guildId, ulong itemId, int itemType, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.GuildId == guildId && e.ItemId == itemId && e.ItemType == itemType, cancellationToken);
		}

		public static XpRoleMultiplier? Find(this ITable<XpRoleMultiplier> table, ulong guildId, ulong roleId)
		{
			return table.FirstOrDefault(e => e.GuildId == guildId && e.RoleId == roleId);
		}

		public static Task<XpRoleMultiplier?> FindAsync(this ITable<XpRoleMultiplier> table, ulong guildId, ulong roleId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.GuildId == guildId && e.RoleId == roleId, cancellationToken);
		}

		public static XpRoleReward? Find(this ITable<XpRoleReward> table, ulong guildId, int level)
		{
			return table.FirstOrDefault(e => e.GuildId == guildId && e.Level == level);
		}

		public static Task<XpRoleReward?> FindAsync(this ITable<XpRoleReward> table, ulong guildId, int level, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.GuildId == guildId && e.Level == level, cancellationToken);
		}

		public static XpRoleTracking? Find(this ITable<XpRoleTracking> table, ulong guildId, ulong roleId, DateTime startTracking)
		{
			return table.FirstOrDefault(e => e.GuildId == guildId && e.RoleId == roleId && e.StartTracking == startTracking);
		}

		public static Task<XpRoleTracking?> FindAsync(this ITable<XpRoleTracking> table, ulong guildId, ulong roleId, DateTime startTracking, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.GuildId == guildId && e.RoleId == roleId && e.StartTracking == startTracking, cancellationToken);
		}

		public static XpUserSnapshot? Find(this ITable<XpUserSnapshot> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<XpUserSnapshot?> FindAsync(this ITable<XpUserSnapshot> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static EfMigrationsHistory? Find(this ITable<EfMigrationsHistory> table, string migrationId)
		{
			return table.FirstOrDefault(e => e.MigrationId == migrationId);
		}

		public static Task<EfMigrationsHistory?> FindAsync(this ITable<EfMigrationsHistory> table, string migrationId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.MigrationId == migrationId, cancellationToken);
		}
		#endregion
	}
}
