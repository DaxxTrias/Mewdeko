-- Migration: Add multi-emote support and stats for starboards
-- This migration adds stats tracking and keeps the existing Emote column
-- Multiple emotes will be stored as pipe-separated values (|)

-- Create StarboardStats table for tracking statistics per emote
CREATE TABLE IF NOT EXISTS public."StarboardStats"
(
    "Id"                integer        NOT NULL GENERATED BY DEFAULT AS IDENTITY (INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1),
    "StarboardId"       integer        NOT NULL,
    "MessageId"         numeric(20, 0) NOT NULL,
    "ChannelId"         numeric(20, 0) NOT NULL,
    "AuthorId"          numeric(20, 0) NOT NULL,
    "Emote"             text           NOT NULL,
    "ReactionCount"     integer        NOT NULL        DEFAULT 0,
    "PeakReactionCount" integer        NOT NULL        DEFAULT 0,
    "FirstStarredAt"    timestamp(6) without time zone DEFAULT now(),
    "LastUpdatedAt"     timestamp(6) without time zone DEFAULT now(),
    "IsActive"          boolean        NOT NULL        DEFAULT true,
    CONSTRAINT "PK_StarboardStats" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_StarboardStats_Starboards" FOREIGN KEY ("StarboardId")
        REFERENCES public."Starboards" ("Id") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

-- Create composite index for efficient lookups
CREATE UNIQUE INDEX "IX_StarboardStats_MessageId_StarboardId_Emote"
    ON public."StarboardStats" ("MessageId", "StarboardId", "Emote");

-- Create indexes for queries
CREATE INDEX "IX_StarboardStats_StarboardId" ON public."StarboardStats" ("StarboardId");
CREATE INDEX "IX_StarboardStats_AuthorId" ON public."StarboardStats" ("AuthorId");
CREATE INDEX "IX_StarboardStats_ChannelId" ON public."StarboardStats" ("ChannelId");
CREATE INDEX "IX_StarboardStats_FirstStarredAt" ON public."StarboardStats" ("FirstStarredAt" DESC);

-- Add ReactionCount column to StarboardPosts (nullable for existing data)
ALTER TABLE public."StarboardPosts"
    ADD COLUMN IF NOT EXISTS "ReactionCount" integer;

-- Add index on MessageId for faster lookups
CREATE INDEX IF NOT EXISTS "IX_StarboardPosts_MessageId" ON public."StarboardPosts" ("MessageId");

-- Create table to track individual star actions (who stars the most)
CREATE TABLE IF NOT EXISTS public."StarboardReactions"
(
    "Id"          integer        NOT NULL GENERATED BY DEFAULT AS IDENTITY (INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1),
    "StarboardId" integer        NOT NULL,
    "MessageId"   numeric(20, 0) NOT NULL,
    "UserId"      numeric(20, 0) NOT NULL,
    "Emote"       text           NOT NULL,
    "DateAdded"   timestamp(6) without time zone DEFAULT now(),
    CONSTRAINT "PK_StarboardReactions" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_StarboardReactions_Starboards" FOREIGN KEY ("StarboardId")
        REFERENCES public."Starboards" ("Id") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

-- Create unique index to prevent duplicate reactions
CREATE UNIQUE INDEX "IX_StarboardReactions_MessageId_UserId_Emote"
    ON public."StarboardReactions" ("MessageId", "UserId", "Emote");

-- Create indexes for statistics queries
CREATE INDEX "IX_StarboardReactions_UserId" ON public."StarboardReactions" ("UserId");
CREATE INDEX "IX_StarboardReactions_StarboardId" ON public."StarboardReactions" ("StarboardId");

-- Create view for checking emote collisions across guilds
CREATE OR REPLACE VIEW public."GuildEmoteUsage" AS
WITH EmoteSplit AS (SELECT s."GuildId",
                           s."Id"                                  as "StarboardId",
                           unnest(string_to_array(s."Emote", '|')) as "Emote"
                    FROM public."Starboards" s
                    WHERE s."Emote" IS NOT NULL
                      AND s."Emote" != '')
SELECT "GuildId",
       "Emote",
       COUNT(DISTINCT "StarboardId")     as "StarboardCount",
       array_agg(DISTINCT "StarboardId") as "StarboardIds"
FROM EmoteSplit
GROUP BY "GuildId", "Emote"
HAVING COUNT(DISTINCT "StarboardId") > 1;

-- View for most starred users per guild
CREATE OR REPLACE VIEW public."MostStarredUsers" AS
SELECT s."GuildId",
       ss."AuthorId",
       COUNT(DISTINCT ss."MessageId") as "StarredMessageCount",
       SUM(ss."PeakReactionCount")    as "TotalStars"
FROM public."StarboardStats" ss
         INNER JOIN public."Starboards" s ON ss."StarboardId" = s."Id"
WHERE ss."IsActive" = true
GROUP BY s."GuildId", ss."AuthorId"
ORDER BY "TotalStars" DESC;

-- View for most active star channels per guild
CREATE OR REPLACE VIEW public."MostActiveStarChannels" AS
SELECT s."GuildId",
       ss."ChannelId",
       COUNT(DISTINCT ss."MessageId") as "StarredMessageCount",
       SUM(ss."PeakReactionCount")    as "TotalStars"
FROM public."StarboardStats" ss
         INNER JOIN public."Starboards" s ON ss."StarboardId" = s."Id"
WHERE ss."IsActive" = true
GROUP BY s."GuildId", ss."ChannelId"
ORDER BY "TotalStars" DESC;

-- View for users who star the most per guild
CREATE OR REPLACE VIEW public."MostActiveStarrers" AS
SELECT s."GuildId",
       sr."UserId",
       COUNT(DISTINCT sr."MessageId") as "StarsGiven",
       COUNT(DISTINCT sr."Emote")     as "UniqueEmotesUsed"
FROM public."StarboardReactions" sr
         INNER JOIN public."Starboards" s ON sr."StarboardId" = s."Id"
GROUP BY s."GuildId", sr."UserId"
ORDER BY "StarsGiven" DESC;